- name: Copy hadoop-env.sh
  lineinfile:
    path: "/opt/hadoop/etc/hadoop/hadoop-env.sh"
    regexp: "^# export {{ item.name }}"
    line: "export {{ item.name }}={{ item.value }}"
    create: yes
  with_items: "{{ hadoop_env_sh }}"
  tags:
  - hadoop-env
# refer: https://docs.ansible.org.cn/ansible/latest/collections/community/general/xml_module.html
- name: Create hadoop.tmp.dir
  file:
    path: "{{ (core_site_xml | selectattr('name', 'equalto', 'hadoop.tmp.dir') | first).value }}"
    state: directory
  tags: 
  - core-site 
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/pip_module.html
- name: Install lxml >= 2.3.0
  pip:
    name: lxml
    state: present
  tags:
  - core-site
- name: Clean up core-site.xml
  xml:
    path: "/opt/hadoop/etc/hadoop/core-site.xml"
    xpath: "/configuration"
    set_children: []
  tags:
  - core-site
- name: Setup core-site.xml
  community.general.xml:
    path: "/opt/hadoop/etc/hadoop/core-site.xml"
    xpath: "/configuration"
    add_children:
      - property:
          name: "{{ item.name }}"
          value: "{{ item.value }}"
    pretty_print: true
  when: item.name is defined and item.value is defined  
  with_items: "{{ core_site_xml }}"
  tags:
  - core-site

- name: Clean up hdfs-site.xml
  xml:
    path: "/opt/hadoop/etc/hadoop/hdfs-site.xml"
    xpath: "/configuration"
    set_children: []
  tags:
  - hdfs-site
- name: Create dfs.datanode.data.dir
  file:
    path: "{{ item }}"
    state: directory
  with_items: "{{ dn_dirs }}"  
  tags:
  - hdfs-site
- name: Setup hdfs-site.xml
  community.general.xml:
    path: "/opt/hadoop/etc/hadoop/hdfs-site.xml"
    xpath: "/configuration"
    add_children:
      - property:
          name: "{{ item.name }}"
          value: "{{ item.value }}"
    pretty_print: true
  with_items: "{{ hdfs_site_xml }}"
  tags:
  - hdfs-site

- name: Clean up mapred-site.xml
  xml:
    path: "/opt/hadoop/etc/hadoop/mapred-site.xml"
    xpath: "/configuration"
    set_children: []
  tags:
  - mapred-site
- name: Setup mapred-site.xml
  community.general.xml:
    path: "/opt/hadoop/etc/hadoop/mapred-site.xml"
    xpath: "/configuration"
    add_children:
      - property:
          name: "{{ item.name }}"
          value: "{{ item.value }}"
    pretty_print: true
  with_items: "{{ mapred_site_xml }}"
  tags:
  - mapred-site

- name: Clean up yarn-site.xml
  xml:
    path: "/opt/hadoop/etc/hadoop/yarn-site.xml"
    xpath: "/configuration"
    set_children: []
  tags:
  - yarn-site

- name: Setup yarn-site.xml
  community.general.xml:
    path: "/opt/hadoop/etc/hadoop/yarn-site.xml"
    xpath: "/configuration"
    add_children:
      - property:
          name: "{{ item.name }}"
          value: "{{ item.value }}"
    pretty_print: true
  with_items: "{{ yarn_site_xml }}"
  tags:
  - yarn-site

- name: Ensure workers file exists
  file:
    path: "/opt/hadoop/etc/hadoop/workers"
    state: touch
  tags:
  - yarn-site
- name: Clean up workers
  copy:
    dest: "/opt/hadoop/etc/hadoop/workers"
    content: ""
  tags:
  - yarn-site
  
- name: Setup workers
  lineinfile:
    path: "/opt/hadoop/etc/hadoop/workers"
    line: "{{ item }}"
  with_items: "{{ workers }}"
  tags:
  - yarn-site

- name: Set JAVA and HADOOP environment variables in /etc/profile
  blockinfile:
    path: /etc/profile
    block: |
      # JAVA
      export JAVA_HOME=/usr/lib/jvm/java-1.8.0  # TODO: based on your linux env
      export PATH=$PATH:$JAVA_HOME/bin
      export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar

      # HADOOP
      export HADOOP_HOME=/opt/hadoop
      export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
    create: yes 
    insertafter: EOF  
  tags:
  - setup_env_vars_hadoop
